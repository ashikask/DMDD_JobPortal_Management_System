
-- TABLE CLEANUP SCRIPT
set serveroutput on
declare
    table_exists varchar(1) := 'Y';
    sql_command varchar(2000);
begin
   dbms_output.put_line('###Start schema cleanup###');
   for i in ( select 'JOB_POST_SKILL' table_name from dual union all
	select 'USER_SKILL' table_name from dual union all
        select 'JOB_EDUCATION_REQ' table_name from dual union all
	select 'USER_EDUCATION' table_name from dual union all
	select 'APPLICATION_TRACKING' table_name from dual union all
        select 'APPLICATIONS' table_name from dual union all
	select 'JOBPOST' table_name from dual union all
	select 'JOB_LOCATION' table_name from dual union all
	select 'COMPANY' table_name from dual union all
	select 'SKILLSET' table_name from dual union all
	select 'EDUCATION' table_name from dual union all
	select 'JOB_CATEGORY' table_name from dual union all
	select 'USERS' table_name from dual 
   )
   loop
   dbms_output.put_line('Dropping the table: '||i.table_name);
   begin
       select 'Y' into table_exists
       from USER_TABLES
       where TABLE_NAME=i.table_name;

       sql_command := 'drop table '||i.table_name;
       execute immediate sql_command;
       dbms_output.put_line('Table '||i.table_name||'has been dropped successfully');
       
   exception
       when no_data_found then
           dbms_output.put_line('Table already dropped');
   end;
   end loop;
   dbms_output.put_line('###Schema cleanup successfully completed###');
exception
   when others then
      dbms_output.put_line('Failed to execute code:'||sqlerrm);
end;
/


--FUNCTION check if table already exist
-- input: tbl_name - name of the table being created
-- output: Boolean indicating table exist or not
CREATE OR REPLACE FUNCTION table_exists(tbl_name IN VARCHAR2) RETURN BOOLEAN AS
    table_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO table_count FROM user_tables WHERE table_name = tbl_name;
    RETURN table_count > 0;
END;

/

--PROCEDURE FOR CREATING TABLES

CREATE OR REPLACE PROCEDURE create_table(
    tbl_name VARCHAR2,
    create_query VARCHAR2
) AS
    table_count NUMBER;
BEGIN
    IF (table_exists(tbl_name)) THEN
        DBMS_OUTPUT.PUT_LINE('Table ' || tbl_name || ' already exists.');
    ELSE
        EXECUTE IMMEDIATE create_query;
        DBMS_OUTPUT.PUT_LINE('Table ' || tbl_name || ' created successfully.');
    END IF;
EXCEPTION 
    WHEN no_data_found THEN
        DBMS_OUTPUT.PUT_LINE('**Table does not exist**'); 
        EXECUTE IMMEDIATE create_query;
        DBMS_OUTPUT.PUT_LINE('Table ' || tbl_name || ' created successfully.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Something went wrong while creating the table ' || tbl_name);
        DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_STACK);
END;
/


BEGIN
  --CREATE TABLES for Job location

    create_table('JOB_LOCATION', '
        CREATE TABLE JOB_LOCATION(
            Job_Location_Id NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1),
            Country VARCHAR2(80) NOT NULL,
            States VARCHAR(80) NOT NULL, 
            City VARCHAR(80) NOT NULL,
            CONSTRAINT Job_Location_PK PRIMARY KEY(Job_Location_Id), 
            CONSTRAINT Job_Location_unique UNIQUE (States, City)   
        )
    ');
    
  -- creates table for the different job category

    create_table('JOB_CATEGORY', '
        CREATE TABLE JOB_CATEGORY(
            Job_Category_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1),
            CONSTRAINT Job_Category_PK PRIMARY KEY(Job_Category_ID), 
            Job_Type VARCHAR2(40) CONSTRAINT Job_Type_Check CHECK(Job_Type IN (''ONSITE'',''HYBRID'',''REMOTE'')),
            CONSTRAINT Job_Type_Unq UNIQUE (Job_Type)
        )
    ');
    
  -- creates table for the different companies

    create_table('COMPANY', 
        'CREATE TABLE COMPANY(
            Company_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1),
            Company_Name varchar2(40) not null, 
            Company_Description varchar2(400) not null, 
            Industry_Type varchar2(40) not null, 
            Company_Size Number not null,
            CONSTRAINT Company_PK primary key(Company_ID),
	    CONSTRAINT Company_unique UNIQUE (Company_name, Industry_Type)
        )
    ');
    
  -- creates table for the different skill sets

    create_table('SKILLSET', 
        'CREATE TABLE SKILLSET(
        Skillset_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1),
        Skill_Name varchar2(40) not null, 
        Skill_Type varchar2(40) CONSTRAINT Skill_Type_Check CHECK(Skill_Type IN (''TECHNICAL'',''SOFTSKILLS'')),
        CONSTRAINT Skillset_PK primary key(Skillset_ID),
        CONSTRAINT Skillset_unique UNIQUE (Skill_Name, Skill_Type)   
        )
    ');

   -- creates table for the Education

    create_table('EDUCATION', 
        'CREATE TABLE EDUCATION(
            Degree_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1),
            Degree_Name varchar2(40) not null, 
            Degree_Type varchar2(40) not null,
            CONSTRAINT Degree_PK primary key(Degree_ID),
            CONSTRAINT EDUCATION_unique UNIQUE (Degree_Name, Degree_Type)
            )
    ');
    
  
    -- creates table for the job post

    create_table('JOBPOST', 
        'CREATE TABLE JOBPOST(
            JobPost_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1), 
            Job_Title varchar2(40) not null, 
            Creation_Date Date not null,
            Job_Description varchar2(400) not null,
            Salary NUMBER not null,
            Created_By varchar2(40) not null,
            Hiring_Status varchar2(40) CONSTRAINT Hiring_Status_Check CHECK(Hiring_Status IN (''AVAILABLE'',''EXPIRED'')),
            CONSTRAINT JobPost_PK primary key(JobPost_ID),
            Job_Location_Id NUMBER NOT NULL CONSTRAINT Job_Location_Id_FK REFERENCES Job_Location(Job_Location_Id) ON DELETE CASCADE,
            Job_Category_ID NUMBER NOT NULL CONSTRAINT Job_Category_ID_FK REFERENCES Job_Category(Job_Category_ID) ON DELETE CASCADE,
            Job_Company_Id NUMBER NOT NULL CONSTRAINT Job_Company_Id_FK REFERENCES Company(Company_ID) ON DELETE CASCADE,
	    CONSTRAINT Jobpost_unique UNIQUE(Job_Title,Creation_Date,Job_Company_Id)
            )
    ');
 
    -- creates table for the users

    create_table('USERS', 
        'CREATE TABLE USERS(
            User_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1),
            First_Name varchar2(40) not null, 
            Last_Name varchar2(40) not null,
            Date_of_Birth Date not null,
            Gender varchar2(40) CONSTRAINT Gender_Check CHECK(Gender IN (''MALE'',''FEMALE'',''OTHER'')),
            Phone_Number NUMBER NOT NULL CONSTRAINT Phone_Number_Unq UNIQUE,
            Role_Type varchar2(40) CONSTRAINT Role_Type_Check CHECK(Role_Type IN (''JOBSEEKER'',''RECRUITER'')),
            CONSTRAINT User_PK primary key(User_ID)
            )
    ');
  
    -- creates table for the applications

    create_table('APPLICATIONS', 
        'CREATE TABLE APPLICATIONS(
            Application_Id NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 321 INCREMENT BY 1),
            Current_Status varchar2(40) CONSTRAINT Current_Status_Check CHECK(Current_Status IN (''APPLIED'',''HIRED'',''INTERVIEW_SCHEDULED'', ''REJECTED'')),
            Application_Date Date not null,
            CONSTRAINT Application_PK primary key(Application_Id), 
            Job_Post_ID NUMBER NOT NULL CONSTRAINT Job_Post_ID_FK REFERENCES JobPost(JobPost_ID) ON DELETE CASCADE,
            User_Id NUMBER NOT NULL CONSTRAINT User_Id_FK REFERENCES USERS(User_ID) ON DELETE CASCADE,
 	    CONSTRAINT APPLICATIONS_unique UNIQUE (User_ID, Job_Post_ID)
            )
    ');


    -- creates table for application tracking

    create_table('APPLICATION_TRACKING', 
        'CREATE TABLE APPLICATION_TRACKING(
            Application_Tracking_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 401 INCREMENT BY 1), 
            Status varchar2(40) CONSTRAINT Status_Check CHECK(Status IN (''APPLIED'',''HIRED'',''INTERVIEW_SCHEDULED'', ''REJECTED'')),
            Changed_On Date not null,
            Modified_By varchar2(40) not null,
            CONSTRAINT Application_Tracking_PK primary key(Application_Tracking_ID),
            Application_ID NUMBER NOT NULL CONSTRAINT Application_ID_FK REFERENCES APPLICATIONS(Application_ID) ON DELETE CASCADE
            )
    ');
  
    -- creates table to list education of the user

    create_table('USER_EDUCATION', 
        'CREATE TABLE USER_EDUCATION(
            Start_Date date not null ,
            End_Date DATE NOT NULL,
            Users_ID NUMBER NOT NULL CONSTRAINT Users_ID_FK REFERENCES USERS(User_ID) ON DELETE CASCADE,
            Degree_ID NUMBER NOT NULL CONSTRAINT DegreeID_FK REFERENCES EDUCATION(Degree_ID) ON DELETE CASCADE,
            CONSTRAINT CheckEndLaterThanStart CHECK (End_Date >= Start_Date),
	    CONSTRAINT USER_EDUCATION_unique UNIQUE (Users_ID, Degree_ID)
            )
    ');
    
    -- creates bridge table between job post and education

    create_table('JOB_EDUCATION_REQ', 
        'CREATE TABLE JOB_EDUCATION_REQ(
                JobPost_ID NUMBER NOT NULL CONSTRAINT JobPost_ID_FK REFERENCES JOBPOST(JobPost_ID) ON DELETE CASCADE,
                Degree_ID NUMBER NOT NULL CONSTRAINT Degree_ID_FK REFERENCES EDUCATION(Degree_ID) ON DELETE CASCADE,
	        CONSTRAINT JOB_EDUCATION_REQ_unique UNIQUE (JobPost_ID, Degree_ID)
                )
    ');
    
    -- creates a bridge table between job posts and skillset

    create_table('JOB_POST_SKILL', 
        'CREATE TABLE JOB_POST_SKILL(
                JobPostSkill_ID NUMBER NOT NULL CONSTRAINT JobPostSkill_ID_FK REFERENCES JOBPOST(JobPost_ID) ON DELETE CASCADE,
                SkillSet_ID NUMBER NOT NULL CONSTRAINT SkillSet_ID_FK REFERENCES Skillset(Skillset_ID) ON DELETE CASCADE,
		CONSTRAINT JOB_POST_SKILL_unique UNIQUE (JobPostSkill_ID, SkillSet_ID)
                )
    ');

    -- creates bridge table between user and skillset

    create_table('USER_SKILL', 
        'CREATE TABLE USER_SKILL(
                User_ID NUMBER NOT NULL CONSTRAINT UserID_FK REFERENCES USERS(User_ID) ON DELETE CASCADE,
                SkillSet_ID NUMBER NOT NULL CONSTRAINT Skill_Set_ID_FK REFERENCES Skillset (Skillset_ID) ON DELETE CASCADE,
		CONSTRAINT USER_SKILL_unique UNIQUE (User_ID, SkillSet_ID)
                )
    ');
    
END;
/


-------- Procedure to Insert data into the table Job Location ----------------

create or replace PROCEDURE JOB_LOCATION_DETAILS(Country in VARCHAR2,States in VARCHAR2, City in VARCHAR2)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO JOB_LOCATION(Country,States, City) VALUES (Country,States, City);
	dbms_output.put_line('Row inserted into JOB_LOCATION Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in JOB_LOCATION table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into JOB_LOCATION Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end JOB_LOCATION_DETAILS;
/  

-------- Inserting data into JOB_LOCATION ----------------

EXEC JOB_LOCATION_DETAILS('United States', 'Texas', 'San Antonio');
EXEC JOB_LOCATION_DETAILS('United States', 'Texas', 'Dallas');
EXEC JOB_LOCATION_DETAILS( 'United States', 'Washington', 'Bellevue');
EXEC JOB_LOCATION_DETAILS( 'United States', 'Illinois', 'Springfield');
EXEC JOB_LOCATION_DETAILS('United States', 'Georgia', 'Savannah');
EXEC JOB_LOCATION_DETAILS('United States', 'Florida', 'Miami');
EXEC JOB_LOCATION_DETAILS('United States', 'Colorado', 'Boulder');
EXEC JOB_LOCATION_DETAILS('United States', 'Massachusetts', 'Boston');
EXEC JOB_LOCATION_DETAILS('United States', 'Florida', 'Tempa');
EXEC JOB_LOCATION_DETAILS('United States', 'Michigan', 'Detroit');
EXEC JOB_LOCATION_DETAILS('United States', 'California', 'San Jose');
EXEC JOB_LOCATION_DETAILS('United States', 'California', 'Santa Clara');
EXEC JOB_LOCATION_DETAILS('United States', 'New York', 'Albany');
EXEC JOB_LOCATION_DETAILS('United States', 'Colorado', 'Denver');
EXEC JOB_LOCATION_DETAILS('United States', 'California', 'San Francisco');
EXEC JOB_LOCATION_DETAILS('United States', 'California', 'Los Angeles');
EXEC JOB_LOCATION_DETAILS('United States', 'New York', 'New York');
EXEC JOB_LOCATION_DETAILS('United States', 'Texas', 'Austin');
EXEC JOB_LOCATION_DETAILS('United States', 'Texas', 'Houston');
EXEC JOB_LOCATION_DETAILS('United States', 'Washington', 'Seattle');
EXEC JOB_LOCATION_DETAILS('United States', 'Illinois', 'Chicago');
EXEC JOB_LOCATION_DETAILS('United States', 'Georgia', 'Atlanta');
/
 
-------- Procedure to Insert data into the table Job Category ------------------

create or replace PROCEDURE JOB_CATEGORY_DETAILS(Job_Type in VARCHAR2)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO JOB_CATEGORY(Job_Type) VALUES (Job_Type);
	dbms_output.put_line('Row inserted into Job_Category Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
        
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in Job_Category table! Insert Different Value');
		when others then
        dbms_output.put_line('Error while inserting data into Job_Category Table');
        IF SQLCODE = -2290 THEN -- ORA-02290: check constraint violation
            dbms_output.put_line('Cannot insert value ' || Job_Type || ', constraint violation detected.');
            dbms_output.put_line('Choose from "ONSITE","REMOTE","HYBRID"');
        else
            dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
        end if;
		rollback;
			
	end JOB_CATEGORY_DETAILS;
 /

-------- Inserting data into JOB_CATEGORY ----------------

EXEC JOB_CATEGORY_DETAILS('ONSITE');
EXEC JOB_CATEGORY_DETAILS('REMOTE');
EXEC JOB_CATEGORY_DETAILS('HYBRID');
/


-------- Procedure to Insert data into the table Company ------------------
 
create or replace PROCEDURE COMPANY_DETAILS(Company_Name in VARCHAR2, Company_Description in VARCHAR2,
Industry_Type IN VARCHAR2, Company_Size Number)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO COMPANY(Company_Name, Company_Description,Industry_Type,Company_Size) VALUES (Company_Name,Company_Description,Industry_Type, Company_Size);
	dbms_output.put_line('Row inserted into COMPANY Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in COMPANY table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into COMPANY Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end COMPANY_DETAILS;
    /

-------- Inserting data into COMPANY ----------------

EXEC COMPANY_DETAILS('TechSoft', 'TechSoft is a software company.', 'Technology', 150);
EXEC COMPANY_DETAILS('FoodMart', 'FoodMart is a supermarket chain.', 'Retail', 500);
EXEC COMPANY_DETAILS('GreenEnergy', 'GreenEnergy is an energy company.', 'Energy', 200);
EXEC COMPANY_DETAILS('SwiftBank', 'SwiftBank is a financial services provider.', 'Banking', 300);
EXEC COMPANY_DETAILS('MediCare', 'MediCare is a healthcare provider.', 'Healthcare', 350);
EXEC COMPANY_DETAILS('ABC Corp', 'ABC Corp is software company', 'Technology', 1000);
EXEC COMPANY_DETAILS('EduCenter', 'EduCenter is an educational services provider.', 'Education', 75);
EXEC COMPANY_DETAILS('Brighter Tomorrow Foundation','Brighter Tomorrow Foundation is a nonprofit organization that supports children in need by providing education, healthcare, and other essential services.','Nonprofit',100);
EXEC COMPANY_DETAILS('Unity Technologies', 'Unity Technologies is a software company that develops tools and platforms for creating and deploying video games and other interactive content.', 'Gaming',500);
EXEC COMPANY_DETAILS('ClearView Insurance', 'ClearView Insurance offers a range of insurance products for individuals and businesses, including auto, home, and liability insurance.', 'Insurance',300);
EXEC COMPANY_DETAILS('Ocean Blue Seafood', 'Ocean Blue Seafood is a seafood distributor that supplies restaurants and supermarkets with fresh, sustainably sourced seafood.', 'Food and Beverage', 50);
EXEC COMPANY_DETAILS('Stellar Analytics', 'Stellar Analytics is a data analysis firm that helps businesses make informed decisions based on their data.', 'Analytics', 1000);
EXEC COMPANY_DETAILS('BluePeak Inc', 'BluePeak is a technology company specializing in cloud computing solutions for businesses of all sizes.', 'Information Technology', 500);
EXEC COMPANY_DETAILS('Summit Pharmaceuticals', 'Summit Pharmaceuticals is a pharmaceutical company that develops and produces innovative drugs for a variety of medical conditions.', 'Pharmaceuticals', 500);
EXEC COMPANY_DETAILS('GreenLeaf Landscaping', 'GreenLeaf Landscaping provides landscaping and lawn care services to residential and commercial customers.', 'Landscaping', 50);
EXEC COMPANY_DETAILS('Red River Consulting', 'Red River Consulting provides strategic consulting services to businesses across a range of industries, helping them achieve their goals', 'Retail', 60);

/
 
-------- Procedure to Insert data into the table Skillset ------------------
 
create or replace PROCEDURE SKILLSET_DETAILS(Skill_Name in VARCHAR2, Skill_Type in VARCHAR2)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO SKILLSET(Skill_Name, Skill_Type) VALUES (Skill_Name, Skill_Type);
	dbms_output.put_line('Row inserted into Job_Category Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in Job_Category table! Insert Different Value');
		when others then
        dbms_output.put_line('Error while inserting data into Job_Category Table');
        IF SQLCODE = -2290 THEN -- ORA-02290: check constraint violation
            dbms_output.put_line('Cannot insert value ' || Skill_Type || ', constraint violation detected.');
            dbms_output.put_line('Choose from "SOFTSKILLS","TECHNICAL"');
        else
            dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
        end if;
		rollback;
	end SKILLSET_DETAILS;
 
/

-------- Inserting data into SKILLSET ----------------

EXEC SKILLSET_DETAILS('Java', 'TECHNICAL');
EXEC SKILLSET_DETAILS('Communication', 'SOFTSKILLS');
EXEC SKILLSET_DETAILS('Public Speaking', 'SOFTSKILLS');
EXEC SKILLSET_DETAILS('Python', 'TECHNICAL');
EXEC SKILLSET_DETAILS('MySQL', 'TECHNICAL');
EXEC SKILLSET_DETAILS('Problem Solving', 'SOFTSKILLS');
EXEC SKILLSET_DETAILS('Leadership', 'SOFTSKILLS');
EXEC SKILLSET_DETAILS('R Studio', 'TECHNICAL');
EXEC SKILLSET_DETAILS('Teamwork', 'SOFTSKILLS');
EXEC SKILLSET_DETAILS('Project Management', 'SOFTSKILLS');
EXEC SKILLSET_DETAILS('Data Analysis', 'TECHNICAL');
/


-------- Procedure to insert data into the table Education ------------------

create or replace PROCEDURE EDUCATION_DETAILS(Degree_Name in VARCHAR2, Degree_Type in VARCHAR2)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO EDUCATION(Degree_Name, Degree_Type) VALUES (Degree_Name, Degree_Type);
	dbms_output.put_line('Row inserted into Education Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in Education table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into Education Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end EDUCATION_DETAILS;

/

-------- Inserting data into EDUCATION ----------------


EXEC EDUCATION_DETAILS('Engineering Management', 'Masters');
EXEC EDUCATION_DETAILS('Business Administration', 'Bachelors');
EXEC EDUCATION_DETAILS('Business Administration', 'Masters');
EXEC EDUCATION_DETAILS('Computer Science','Masters');
EXEC EDUCATION_DETAILS('Computer Science','Bachelors');
EXEC EDUCATION_DETAILS('Information System', 'Masters');
EXEC EDUCATION_DETAILS('Industrial Engineering','Masters');
EXEC EDUCATION_DETAILS('Civil Engineering', 'Masters');
EXEC EDUCATION_DETAILS('Psychology', 'Bachelors');
EXEC EDUCATION_DETAILS( 'Marketing', 'Bachelors');
EXEC EDUCATION_DETAILS('Mechanical Engineering','Bachelors');
/

 
-------- Creating ONBOADRDING_USER_PACKAGE Package  ------------------

CREATE OR REPLACE PACKAGE ONBOADRDING_USER_PACKAGE AS
    PROCEDURE USER_DETAILS(First_Name in VARCHAR2,
Last_Name IN VARCHAR2, Date_of_Birth IN DATE, Gender IN VARCHAR2,Phone_Number IN NUMBER, Role_Type IN VARCHAR2);
    PROCEDURE USER_SKILL_DETAILS(User_ID IN NUMBER, Skillset_ID IN NUMBER);
    PROCEDURE USER_EDUCATION_DETAILS(Users_ID IN NUMBER, DEGREE_ID IN NUMBER, START_DATE IN DATE, END_DATE IN DATE);
END ONBOADRDING_USER_PACKAGE;
/


CREATE OR REPLACE PACKAGE BODY ONBOADRDING_USER_PACKAGE AS
 PROCEDURE USER_DETAILS(First_Name in VARCHAR2,
    Last_Name IN VARCHAR2, Date_of_Birth IN DATE, Gender IN VARCHAR2,Phone_Number IN NUMBER, Role_Type IN VARCHAR2)
	AS
	BEGIN
    IF LENGTH(TO_CHAR(Phone_Number)) <> 10 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Phone number must be 10 digits long');
    END IF;
    
    IF Date_of_Birth >= TRUNC(SYSDATE) - 18*365.25 THEN
        RAISE_APPLICATION_ERROR(-20002, 'User must be at least 18 years old');
    END IF;
    
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO USERS(First_Name, Last_Name, Date_of_Birth, Gender, Phone_Number, Role_Type) VALUES (First_Name, Last_Name, Date_of_Birth, Gender, Phone_Number, Role_Type);
	dbms_output.put_line('Row inserted into USERS Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in USERS table! Insert Different Value');
        when others then
		IF SQLCODE = -2290 THEN -- ORA-02290: check constraint violation
            dbms_output.put_line('Cannot insert value ' || Gender || ', constraint violation detected.');
            dbms_output.put_line('Choose from "MALE","FEMALE","OTHERS"');
        else
            dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
        end if;
		rollback;
	end USER_DETAILS;

-------- Procedure to insert data into the table User_Skill -------------------

    PROCEDURE USER_SKILL_DETAILS(User_ID IN NUMBER, Skillset_ID IN NUMBER)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO USER_SKILL(User_ID, Skillset_ID) VALUES (User_ID, Skillset_ID);
	dbms_output.put_line('Row inserted into USER_SKILL Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in USER_SKILL table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into USER_SKILL Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end USER_SKILL_DETAILS;

-------- Procedure to insert data into the table User_Education ----------------------
    
    PROCEDURE USER_EDUCATION_DETAILS(Users_ID IN NUMBER, DEGREE_ID IN NUMBER, START_DATE IN DATE, END_DATE IN DATE)
	AS
	BEGIN
    IF END_DATE < START_DATE THEN
        RAISE_APPLICATION_ERROR(-20003, 'start date should be less than end date');
    END IF;
    
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO USER_EDUCATION(Users_ID, DEGREE_ID, START_DATE, END_DATE) VALUES (Users_ID, DEGREE_ID, START_DATE, END_DATE);
	dbms_output.put_line('Row inserted into USER_EDUCATION Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in USER_EDUCATION table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into USER_EDUCATION Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end USER_EDUCATION_DETAILS;
END ONBOADRDING_USER_PACKAGE;
/

---------------- Inserting Data into User -------------------------

EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('John', 'Doe', TO_DATE('1990-01-01', 'YYYY-MM-DD'), 'MALE', 1234567890, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('Jane', 'Doe', TO_DATE('1995-02-14', 'YYYY-MM-DD'), 'FEMALE', 2345678901, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('Bob', 'Smith', TO_DATE('1985-07-22', 'YYYY-MM-DD'), 'MALE', 3456789012, 'RECRUITER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('David', 'Lee', TO_DATE('2003-04-15', 'YYYY-MM-DD'), 'MALE', 5678901234, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('Sarah', 'Kim', TO_DATE('1991-09-28', 'YYYY-MM-DD'), 'FEMALE', 6789012345, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('Emily', 'Wang', TO_DATE('1994-11-11', 'YYYY-MM-DD'), 'FEMALE', 8901234567, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('Isabella', 'Brown', TO_DATE('1997-03-17', 'YYYY-MM-DD'), 'FEMALE', 3456789013, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('Olivia', 'Garcia', TO_DATE('1992-05-20', 'YYYY-MM-DD'), 'FEMALE', 1234567891, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('Michael', 'Johnson', TO_DATE('1998-08-08', 'YYYY-MM-DD'), 'MALE', 9012345678, 'JOBSEEKER');
EXEC ONBOADRDING_USER_PACKAGE.USER_DETAILS('William', 'Martinez', TO_DATE('1989-12-31', 'YYYY-MM-DD'), 'MALE', 2345678902, 'JOBSEEKER');
/

---------------- Inserting Data into User_Skill --------------------


EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(101, 101);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(101, 104);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(101, 105);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(102, 101);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(102, 104);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(102, 105);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(102, 102);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(102, 107);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(104, 109);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(104, 103);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(104, 102);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(105, 105);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(105, 102);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(105, 103);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(106, 110);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(105, 111);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(106, 109);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(106, 103);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(107, 102);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(107, 106);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(108, 108);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(110, 101);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(110, 104);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(109, 102);
EXEC ONBOADRDING_USER_PACKAGE.USER_SKILL_DETAILS(109, 110);
/

---------------- Inserting Data into User_Education --------------------

    
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(101, 104,TO_DATE('09/4/2020', 'MM/DD/YYYY'), TO_DATE('5/4/2024', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(101, 107,TO_DATE('08/20/2024', 'MM/DD/YYYY'), TO_DATE('6/4/2026', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(102, 104,TO_DATE('09/20/2020', 'MM/DD/YYYY'), TO_DATE('4/30/2024', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(102, 103,TO_DATE('08/13/2024', 'MM/DD/YYYY'), TO_DATE('5/22/2026', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(104, 102,TO_DATE('09/17/2020', 'MM/DD/YYYY'), TO_DATE('4/20/2024', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(105, 104,TO_DATE('09/23/2020', 'MM/DD/YYYY'), TO_DATE('5/17/2024', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(105, 107, TO_DATE('08/29/2024', 'MM/DD/YYYY'), TO_DATE('5/15/2026', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(106, 104,TO_DATE('09/6/2020', 'MM/DD/YYYY'), TO_DATE('4/29/2024', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(106, 101,TO_DATE('08/4/2024', 'MM/DD/YYYY'), TO_DATE('5/17/2026', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(107, 102,TO_DATE('05/11/2019', 'MM/DD/YYYY'), TO_DATE('09/05/2023', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(107, 103,TO_DATE('11/23/2023', 'MM/DD/YYYY'), TO_DATE('05/05/2025', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(108, 109,TO_DATE('05/08/2019', 'MM/DD/YYYY'), TO_DATE('05/16/2022', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(108, 106,TO_DATE('11/03/2022', 'MM/DD/YYYY'), TO_DATE('04/14/2024', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(109, 102,TO_DATE('12/18/2018', 'MM/DD/YYYY'), TO_DATE('01/14/2021', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(109, 106,TO_DATE('05/17/2021', 'MM/DD/YYYY'), TO_DATE('12/30/2023', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(110, 105, TO_DATE('02/12/2016', 'MM/DD/YYYY'), TO_DATE('11/11/2020', 'MM/DD/YYYY'));
EXEC ONBOADRDING_USER_PACKAGE.USER_EDUCATION_DETAILS(110, 104,TO_DATE('01/12/2021', 'MM/DD/YYYY'), TO_DATE('07/17/2024', 'MM/DD/YYYY'));

/

-------- Creating POST_JOB_PACKAGE Package ------------------

CREATE OR REPLACE PACKAGE POST_JOB_PACKAGE AS
    FUNCTION validate_salary (salary NUMBER) RETURN BOOLEAN;
    PROCEDURE JOBPOST_DETAILS(Job_Title in VARCHAR2, Creation_Date in DATE, Job_Description in VARCHAR2,
    Created_By in VARCHAR2, Salary in NUMBER, Hiring_Status in VARCHAR2, Job_Location_Id in NUMBER, Job_Category_ID in NUMBER, Job_Company_Id in NUMBER);
    PROCEDURE JOB_POST_SKILL_DETAILS(JobPostSkill_ID IN NUMBER, SkillSet_ID IN NUMBER);
    PROCEDURE JOB_EDUCATION_REQ_DETAILS(JobPost_ID IN NUMBER, Degree_ID IN NUMBER);
    PROCEDURE Update_Job_Post(job_id in NUMBER, hire_status in VARCHAR2);
END POST_JOB_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY POST_JOB_PACKAGE AS

FUNCTION validate_salary (salary NUMBER)
RETURN BOOLEAN
AS
BEGIN
    RETURN salary >= 0;
END;


-------- Procedure to insert data into the table JOBPOST -------------------

PROCEDURE JOBPOST_DETAILS(Job_Title in VARCHAR2, Creation_Date in DATE, Job_Description in VARCHAR2,
    Created_By in VARCHAR2, Salary in NUMBER, Hiring_Status in VARCHAR2, Job_Location_Id in NUMBER, Job_Category_ID in NUMBER, Job_Company_Id in NUMBER)
AS
BEGIN
    dbms_output.put_line('----------------------------------------------------------');
    IF validate_salary(Salary) THEN
        INSERT INTO JOBPOST(Job_Title, Creation_Date, Job_Description, Created_By, Salary, Hiring_Status, Job_Location_Id, Job_Category_ID, Job_Company_Id) 
        VALUES (Job_Title, Creation_Date, Job_Description, Created_By, Salary, Hiring_Status, Job_Location_Id, Job_Category_ID, Job_Company_Id);
        dbms_output.put_line('Row inserted into JOBPOST Table');
    ELSE
        dbms_output.put_line('Salary cannot be negative. Insert a different value');
    END IF;
    dbms_output.put_line('----------------------------------------------------------');
    commit;
    exception
        when dup_val_on_index then
            dbms_output.put_line('Duplicate Value Found in JOBPOST table! Insert Different Value');
        when others then
        dbms_output.put_line('Error while inserting data into Job_Category Table');
        IF SQLCODE = -2290 THEN -- ORA-02290: check constraint violation
            dbms_output.put_line('Cannot insert value ' || Hiring_Status || ', constraint violation detected.');
            dbms_output.put_line('Choose from "AVAILABLE","EXPIRED"');
        else
            dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
        end if;
		rollback;
END JOBPOST_DETAILS;


-------- Procedure to insert data into the table JOB_POST_SKILL -------------------

    
    PROCEDURE JOB_POST_SKILL_DETAILS(JobPostSkill_ID IN NUMBER, SkillSet_ID IN NUMBER)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO JOB_POST_SKILL(JobPostSkill_ID, SkillSet_ID) VALUES (JobPostSkill_ID,SkillSet_ID);
	dbms_output.put_line('Row inserted into JOB_POST_SKILL Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in JOB_POST_SKILL table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into JOB_POST_SKILL Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end JOB_POST_SKILL_DETAILS;


-------- Procedure to insert data into the table JOB_EDUCATION_REQ -------------------

    
    PROCEDURE JOB_EDUCATION_REQ_DETAILS(JobPost_ID IN NUMBER, Degree_ID IN NUMBER)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO JOB_EDUCATION_REQ(JobPost_ID, Degree_ID) VALUES (JobPost_ID, Degree_ID);
	dbms_output.put_line('Row inserted into JOB_EDUCATION_REQ Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in JOB_EDUCATION_REQ table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into JOB_EDUCATION_REQ Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end JOB_EDUCATION_REQ_DETAILS;

-------- Procedure to update Job_Post -------------------

    
    PROCEDURE Update_Job_Post(job_id in NUMBER, hire_status in VARCHAR2)
as
    hire_stat jobpost.hiring_status%TYPE;
BEGIN
    select hiring_status into hire_stat from jobpost where jobpost_id = job_id;
    IF hire_stat = hire_status THEN
        dbms_output.put_line('Hiring status is already ' || hire_status || ', no update necessary.');
    ELSE
        dbms_output.put_line('----------------------------------------------------------');
        UPDATE jobpost set hiring_status = hire_status where jobpost_id = job_id;
        dbms_output.put_line('Hiring status of JOB ID '||job_id|| ' changed to '|| hire_status);
        dbms_output.put_line('----------------------------------------------------------');
        commit;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -2290 THEN -- ORA-02290: check constraint violation
            dbms_output.put_line('Cannot update status to ' || hire_status || ', constraint violation detected.');
            dbms_output.put_line('Choose from "AVAILABLE","EXPIRED"');
        ELSE
            dbms_output.put_line('Error while updating data into Job Post Table');
            dbms_output.put_line('The error encountered is: ');
            dbms_output.put_line(dbms_utility.format_error_stack);
        END IF;
        ROLLBACK;
        dbms_output.put_line('----------------------------------------------------------');
END Update_Job_Post ;
    
END POST_JOB_PACKAGE;
/


-------- Inserting Data into JOBPOST -------------------------

EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Software Developer', TO_DATE('2022-02-15', 'YYYY-MM-DD'), 'We are seeking a skilled software developer to join our team.', user, 50000, 'AVAILABLE', 101, 101, 101);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Marketing Manager', TO_DATE('2022-03-01', 'YYYY-MM-DD'), 'We are looking for an experienced marketing manager to lead our team.', user,100000, 'AVAILABLE', 102, 102, 102);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Data Analyst', TO_DATE('2022-02-28', 'YYYY-MM-DD'), 'We are seeking a data analyst to help us make informed business decisions.', user, 60000,'AVAILABLE', 101, 103, 103);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Finance Manager', TO_DATE('2022-03-15', 'YYYY-MM-DD'), 'We are looking for a finance manager to oversee our financial operations.', user, 120000,'AVAILABLE', 103, 102, 104);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('IT Support Specialist', TO_DATE('2022-02-20', 'YYYY-MM-DD'), 'We are seeking an IT support specialist to assist our employees with technical issues.', user,130000, 'AVAILABLE', 104, 101, 105);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Sales Manager', TO_DATE('2022-03-20', 'YYYY-MM-DD'), 'We are seeking an experienced sales manager to lead our team and drive sales growth.', user, 4000,'AVAILABLE', 105, 102, 105);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Project Manager', TO_DATE('2022-03-10', 'YYYY-MM-DD'), 'We are looking for a skilled project manager to oversee our projects and ensure they are completed on time and within budget.', user,140000, 'AVAILABLE', 106, 103, 101);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('HR Manager', TO_DATE('2022-03-01', 'YYYY-MM-DD'), 'We are looking for an experienced HR manager to oversee our HR department and manage employee relations.', user, 700000,'AVAILABLE', 108, 103, 103);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Graphic Designer', TO_DATE('2023-04-12', 'YYYY-MM-DD'), 'We are seeking a creative and skilled graphic designer to join our team and help us develop visual content.', user,30000, 'AVAILABLE',116,102,112);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Customer Service Representative', TO_DATE('2022-06-10', 'YYYY-MM-DD'), 'We are looking for a friendly and helpful customer service representative to assist our customers with their inquiries and issues', user,30000, 'AVAILABLE',119,101,116);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Web Developer', TO_DATE('2022-07-09', 'YYYY-MM-DD'), 'We are seeking a talented web developer to create and maintain our company website', user,80000, 'AVAILABLE',120,102,109);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Business Analyst', TO_DATE('2022-11-03', 'YYYY-MM-DD'), 'We are looking for a skilled business analyst to help us identify opportunities for growth and improvement in our business operations.', user,7000, 'AVAILABLE',118,102,108);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Quality Control Specialist', TO_DATE('2022-09-08', 'YYYY-MM-DD'), 'We are looking for a detail-oriented quality control specialist to ensure our products meet high standards of quality.', user,8000, 'AVAILABLE',112,101,109);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Operations Manager', TO_DATE('2022-02-05', 'YYYY-MM-DD'), 'We are seeking an experienced operations manager to oversee our daily operations and improve efficiency.', user,3000, 'AVAILABLE',118,103,110);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Data Scientist', TO_DATE('2022-05-09', 'YYYY-MM-DD'), 'We are looking for a data scientist to analyze complex data and provide insights to improve our business strategies.', user,2000, 'AVAILABLE',114,103,111);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Product Manager', TO_DATE('2022-07-08', 'YYYY-MM-DD'), 'We are seeking a product manager to oversee the development and launch of our new product.', user,2000, 'AVAILABLE',105,103,112);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Social Media Manager', TO_DATE('2022-05-05', 'YYYY-MM-DD'), 'We are looking for a social media manager to develop and execute social media strategies to promote our brand.', user,60000, 'AVAILABLE',122,102,116);
EXEC POST_JOB_PACKAGE.JOBPOST_DETAILS('Accountant', TO_DATE('2022-08-10', 'YYYY-MM-DD'), 'We are looking for a detail-oriented accountant to manage our financial records and ensure accuracy in financial reporting.', user,11000, 'AVAILABLE',105,103,104);
/

-------- Inserting Data into JOB_POST_SKILL -------------------------

EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 101, 101);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 101, 104 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(101, 105);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(102, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(102, 103);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(103, 105);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(103, 104);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(103, 108);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(104, 110);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(104, 111);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(104, 103);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(105, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(105, 103);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(106, 109);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(106, 103); 
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(106, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(107, 110);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(107, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(108, 110);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(108, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(108, 103);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(  109, 102 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(  109, 103 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(  109, 107 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(  110, 102 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 110, 103);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(110, 106);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 111, 101); 
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(111, 104);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 111, 105);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(111, 106);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(112, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(112, 106);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 112, 107 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(112, 111);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(113, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(113, 106);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 113, 110 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(114, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(114, 106);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(114, 110);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 114, 111 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(115, 104);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(115, 105);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(115, 106);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 116, 102 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 116, 106 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(116, 110);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(117, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(117, 103);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS( 117, 111 );
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(118, 102);
EXEC POST_JOB_PACKAGE.JOB_POST_SKILL_DETAILS(118, 108);
/

-------- Inserting Data into JOB_EDUCATION_REQ -------------------------

  
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(101, 104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(101, 105);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(102, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(102, 103);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(102, 101);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(103, 101);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(103, 104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(103, 105);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(103, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(104, 101);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(104, 103);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(104, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(105, 104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(105, 105);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(105, 107);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(106, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(106, 103);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(107, 101);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(107, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(108, 101);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(108, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(109, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(109, 103);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(109, 111);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(110, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(110, 103);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(110, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(110, 111);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(111, 105);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(111, 104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(111, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(112, 101);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(112, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(112, 105);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(112,104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(113, 105);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(113, 104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(113, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(114, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(114, 103);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(114, 106);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(115, 104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(116, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(116, 103);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(116, 108);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(116, 105);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(116, 104);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(117, 111);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(117, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(118, 109);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(118, 102);
EXEC POST_JOB_PACKAGE.JOB_EDUCATION_REQ_DETAILS(118, 103);
/

-------- Creating JOB_APPLICATION_PACKAGE Package ------------------

CREATE OR REPLACE PACKAGE JOB_APPLICATION_PACKAGE AS
    PROCEDURE APPLICATION_DETAILS(Current_Status IN VARCHAR2, Application_Date IN DATE, Job_Post_ID IN NUMBER,User_ID IN NUMBER);
    PROCEDURE Update_Application_Status(APP_ID IN NUMBER, cur_status IN VARCHAR2);
END JOB_APPLICATION_PACKAGE;
/
    
    
CREATE OR REPLACE PACKAGE BODY JOB_APPLICATION_PACKAGE AS
PROCEDURE APPLICATION_DETAILS(Current_Status IN VARCHAR2, Application_Date IN DATE, Job_Post_ID IN NUMBER,User_ID IN NUMBER)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
	INSERT INTO APPLICATIONS(Current_Status, Application_Date, Job_Post_ID, User_ID) VALUES (Current_Status, Application_Date, Job_Post_ID, User_ID);
	dbms_output.put_line('Row inserted into APPLICATIONS Table');
	dbms_output.put_line('----------------------------------------------------------');
	commit;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in APPLICATIONS table! Insert Different Value');
		WHEN OTHERS THEN
        IF SQLCODE = -2290 THEN -- ORA-02290: check constraint violation
            dbms_output.put_line('Cannot insert status to ' || Current_Status || ', constraint violation detected.');
            dbms_output.put_line('Choose from ''APPLIED'',''HIRED'',''INTERVIEW_SCHEDULED'', ''REJECTED''');
        ELSE
            dbms_output.put_line('Error while updating data into Applications Table');
            dbms_output.put_line('The error encountered is: ');
            dbms_output.put_line(dbms_utility.format_error_stack);
        END IF;
        ROLLBACK;
	end APPLICATION_DETAILS;

-------- Procedure to update Application_Status -------------------
    
    PROCEDURE Update_Application_Status(APP_ID IN NUMBER, cur_status IN VARCHAR2)
AS
    curr_status applications.current_status%TYPE;
BEGIN
    SELECT current_status INTO curr_status FROM applications WHERE application_id = APP_ID;
    IF curr_status = cur_status THEN
        dbms_output.put_line('Application status is already ' || cur_status || ', no update necessary.');
    ELSE
        dbms_output.put_line('----------------------------------------------------------');
        UPDATE applications SET current_status = cur_status WHERE application_id = APP_ID;
        dbms_output.put_line('Application Status of Application ID '||APP_ID|| ' changed to '|| cur_status);
        dbms_output.put_line('----------------------------------------------------------');
        COMMIT;
    END IF;
EXCEPTION 
    WHEN OTHERS THEN
        IF SQLCODE = -2290 THEN -- ORA-02290: check constraint violation
            dbms_output.put_line('Cannot update status to ' || cur_status || ', constraint violation detected.');
            dbms_output.put_line('Choose from ''APPLIED'',''HIRED'',''INTERVIEW_SCHEDULED'', ''REJECTED''');
        ELSE
            dbms_output.put_line('Error while updating data into Applications Table');
            dbms_output.put_line('The error encountered is: ');
            dbms_output.put_line(dbms_utility.format_error_stack);
        END IF;
        ROLLBACK;
        dbms_output.put_line('----------------------------------------------------------');
END Update_Application_Status;

END JOB_APPLICATION_PACKAGE;
/



------------- Inserting Data into JOB_APPLICATION_PACKAGE ---------------------------- 

EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('APPLIED', TO_DATE('2023-03-23', 'YYYY-MM-DD'), 101,105);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('REJECTED', TO_DATE('2023-02-10', 'YYYY-MM-DD'),  101, 102);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('HIRED', TO_DATE('2023-02-06', 'YYYY-MM-DD'),  102, 102);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('INTERVIEW_SCHEDULED', TO_DATE('2023-02-10', 'YYYY-MM-DD'),  105, 105);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('INTERVIEW_SCHEDULED', TO_DATE('2023-01-09', 'YYYY-MM-DD'),  103, 102);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('APPLIED', TO_DATE('2023-01-24', 'YYYY-MM-DD'),  103, 105);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('HIRED', TO_DATE('2023-02-22', 'YYYY-MM-DD'),  104, 105);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('APPLIED', TO_DATE('2022-12-30', 'YYYY-MM-DD'),  106, 102);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('APPLIED', TO_DATE('2023-02-21', 'YYYY-MM-DD'),  106, 104);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('APPLIED', TO_DATE('2023-02-09', 'YYYY-MM-DD'),  106, 106);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('INTERVIEW_SCHEDULED', TO_DATE('2023-01-10', 'YYYY-MM-DD'),  101, 101);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('HIRED', TO_DATE('2023-02-12', 'YYYY-MM-DD'),  101, 106);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('REJECTED', TO_DATE('2022-05-23', 'YYYY-MM-DD'),  109, 107);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('REJECTED', TO_DATE('2022-09-12', 'YYYY-MM-DD'),  110, 108);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('HIRED', TO_DATE('2022-08-12', 'YYYY-MM-DD'),  111, 110);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('INTERVIEW_SCHEDULED', TO_DATE('2022-12-04', 'YYYY-MM-DD'),  112, 108);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('APPLIED', TO_DATE('2022-09-11', 'YYYY-MM-DD'),  113, 107);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('REJECTED', TO_DATE('2022-03-29', 'YYYY-MM-DD'),  114, 109);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('APPLIED', TO_DATE('2022-05-21', 'YYYY-MM-DD'),  115, 104);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('HIRED', TO_DATE('2022-01-09', 'YYYY-MM-DD'),  116, 104);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('REJECTED', TO_DATE('2022-07-01', 'YYYY-MM-DD'),  117, 105);
EXEC JOB_APPLICATION_PACKAGE.APPLICATION_DETAILS('INTERVIEW_SCHEDULED', TO_DATE('2022-01-09', 'YYYY-MM-DD'),  118, 108);

/

-------------- Inserting Data into APPLICATION_TRACKING Table -------------------------

INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('3/23/2023', 'MM/DD/YYYY'), user, 321);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('2/10/2023', 'MM/DD/YYYY'), user, 322);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('2/23/2023', 'MM/DD/YYYY'), user, 322 );
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('REJECTED', TO_DATE('3/15/2023', 'MM/DD/YYYY'), user, 322);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('1/13/2023', 'MM/DD/YYYY'), 'Jane Doe', 323);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('1/28/2023', 'MM/DD/YYYY'), user, 323);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('HIRED', TO_DATE('2/6/2023', 'MM/DD/YYYY'), user, 323); 
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('2/1/2023', 'MM/DD/YYYY'), 'Sarah Kim', 324);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('2/10/2023', 'MM/DD/YYYY'), user, 324);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('1/1/2023', 'MM/DD/YYYY'), 'Jane Doe', 325);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('1/9/2023', 'MM/DD/YYYY'), user, 325);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('1/24/2023', 'MM/DD/YYYY'), 'Sarah Kim', 326);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('12/30/2022', 'MM/DD/YYYY'), 'Jane Doe', 328);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('02/21/2023', 'MM/DD/YYYY'), 'David Lee', 329);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('02/09/2023', 'MM/DD/YYYY'), 'Emily Wang', 330);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('11/11/2022', 'MM/DD/YYYY'), 'John Doe', 331);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('01/10/2023', 'MM/DD/YYYY'), user, 331);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('12/17/2022', 'MM/DD/YYYY'), 'Sarah Kim', 327);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('01/12/2023', 'MM/DD/YYYY'), user, 327);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('HIRED', TO_DATE('02/22/2023', 'MM/DD/YYYY'), user, 327);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('08/09/2022', 'MM/DD/YYYY'), 'Emily Wang', 332);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('08/12/2022', 'MM/DD/YYYY'), user, 332);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('HIRED', TO_DATE('02/12/2023', 'MM/DD/YYYY'), user, 332);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('05/02/2022', 'MM/DD/YYYY'), 'Isabella Brown', 333);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('REJECTED', TO_DATE('05/23/2022', 'MM/DD/YYYY'), user, 333);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('07/23/2022', 'MM/DD/YYYY'), 'Olivia Garcia', 334);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('REJECTED', TO_DATE('09/12/2022', 'MM/DD/YYYY'), user, 334);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('07/18/2022', 'MM/DD/YYYY'), 'Michael Johnson', 335);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('08/02/2022', 'MM/DD/YYYY'), user, 335);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('HIRED', TO_DATE('08/12/2022', 'MM/DD/YYYY'), user, 335);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('11/25/2022', 'MM/DD/YYYY'), 'Olivia Garcia', 336);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('12/04/2022', 'MM/DD/YYYY'), user, 336);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('09/11/2022', 'MM/DD/YYYY'), 'Isabella Brown', 337);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('02/21/2022', 'MM/DD/YYYY'), 'William Martinez', 338);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('03/12/2022', 'MM/DD/YYYY'), user, 338);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('REJECTED', TO_DATE('03/29/2022', 'MM/DD/YYYY'), user, 338);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('05/21/2022', 'MM/DD/YYYY'), 'David Lee', 339);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('07/30/2022', 'MM/DD/YYYY'),'David Lee', 340);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('08/11/2022', 'MM/DD/YYYY'), user, 340);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('HIRED', TO_DATE('09/01/2022', 'MM/DD/YYYY'), user, 340);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('06/19/2022', 'MM/DD/YYYY'),'Sarah Kim', 341);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('REJECTED', TO_DATE('07/01/2022', 'MM/DD/YYYY'), user, 341);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('APPLIED', TO_DATE('08/12/2022', 'MM/DD/YYYY'), 'Olivia Garcia', 342);
INSERT INTO APPLICATION_TRACKING ( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID) values ('INTERVIEW_SCHEDULED', TO_DATE('09/01/2022', 'MM/DD/YYYY'), user, 342);
/
----- Create trigger for application tracking  ------

create or replace trigger app_track_count
after update or insert on applications
for each row
begin 
    if updating and :new.current_status <> :old.current_status or inserting then
    insert into application_tracking( STATUS, CHANGED_ON, MODIFIED_BY, APPLICATION_ID)
    values (:new.current_status, sysdate, user, :new.application_id );

    end if;
end;
/

------ Changing Job_Post to Expired------------  

EXEC POST_JOB_PACKAGE.Update_Job_Post(102, 'EXPIRED');
EXEC POST_JOB_PACKAGE.Update_Job_Post(104, 'EXPIRED');
EXEC POST_JOB_PACKAGE.Update_Job_Post(101, 'EXPIRED');
EXEC POST_JOB_PACKAGE.Update_Job_Post(111, 'EXPIRED');
/

----- CREATING JOB_SEEKER_PACKAGE PACKAGE ----
----- This package has functions and procedure for job seeker to look for jobs and his/her applications ---
CREATE OR REPLACE PACKAGE JOB_SEEKER_PACKAGE AS
    PROCEDURE APPLY_JOB(Current_Status IN VARCHAR2, Application_Date IN DATE, Job_Post_ID IN NUMBER,User_ID IN NUMBER);
    FUNCTION check_job_application(p_user_phoneNumber IN NUMBER) RETURN SYS_REFCURSOR;
    FUNCTION job_based_on_degree(p_user_phoneNumber IN NUMBER) RETURN SYS_REFCURSOR;
    FUNCTION job_based_on_skill(p_user_phoneNumber IN NUMBER) RETURN SYS_REFCURSOR;
    procedure check_job_application_status(p_user_phoneNumber IN NUMBER);
    procedure search_job_degree(p_user_phoneNumber IN NUMBER);
    procedure search_job_skill(p_user_phoneNumber IN NUMBER);
END JOB_SEEKER_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY JOB_SEEKER_PACKAGE AS
    --- PROCEDURE TO APPLY FOR JOB ---
    PROCEDURE APPLY_JOB(Current_Status IN VARCHAR2, Application_Date IN DATE, Job_Post_ID IN NUMBER,User_ID IN NUMBER)
	AS
	BEGIN
	dbms_output.put_line('----------------------------------------------------------');
    IF Current_Status = 'APPLIED' THEN
        INSERT INTO APPLICATIONS(Current_Status, Application_Date, Job_Post_ID, User_ID) VALUES (Current_Status, Application_Date, Job_Post_ID, User_ID);
        dbms_output.put_line('Row inserted into APPLICATIONS Table');
        dbms_output.put_line('----------------------------------------------------------');
        commit;
    ELSE
       dbms_output.put_line('WRONG INPUTS TRY AGAIN');
        dbms_output.put_line('----------------------------------------------------------');
    END IF;
	exception
		when dup_val_on_index then
		dbms_output.put_line('Duplicate Value Found in APPLICATIONS table! Insert Different Value');
		when others then
		dbms_output.put_line('Error while inserting data into APPLICATIONS Table');
		rollback;
			dbms_output.put_line('The error encountered is: ');
			dbms_output.put_line(dbms_utility.format_error_stack);
			dbms_output.put_line('----------------------------------------------------------');
	end APPLY_JOB;

    --FUNCTION check job application status
    -- input: p_user_phoneNumber - phone number of jobseeker
    -- output: cursor with job_title, current_status, application_date
    FUNCTION check_job_application(p_user_phoneNumber IN NUMBER) RETURN SYS_REFCURSOR AS
    v_cursor SYS_REFCURSOR;
    v_user_id users.user_id%TYPE;
BEGIN

    SELECT user_id INTO v_user_id FROM users WHERE phone_number = p_user_phoneNumber;
    
    OPEN v_cursor FOR
        SELECT JOBPOST.job_title, applications.current_status, applications.application_date
        FROM JOBPOST
        JOIN applications ON JOBPOST.JOBPOST_ID = applications.JOB_POST_ID
        WHERE applications.user_id = v_user_id;
    RETURN v_cursor;

    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('User does not exist');
                RETURN NULL;
END;

--- procedure to check the application status of all jobs applied by user -----
procedure check_job_application_status(p_user_phoneNumber IN NUMBER)
IS
    v_cursor SYS_REFCURSOR;
    v_job_title jobpost.job_title%TYPE;
    v_status applications.current_status%TYPE;
    v_date applications.application_date%TYPE;
BEGIN
    v_cursor := check_job_application(p_user_phoneNumber); 

    IF v_cursor%ISOPEN THEN
        LOOP
            FETCH v_cursor INTO v_job_title, v_status, v_date;
            EXIT WHEN v_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Job Title: ' || v_job_title || ', Status: ' || v_status || ', Date: ' || v_date);
        END LOOP;
        CLOSE v_cursor;
    ELSE
        DBMS_OUTPUT.PUT_LINE('No job application found for the given user.');
    END IF;
END check_job_application_status;

 --FUNCTION to get the jobs based on the user degree
    -- input: p_user_phoneNumber - phone number of jobseeker
    -- output: cursor with job_title, degree_name
    FUNCTION job_based_on_degree(p_user_phoneNumber IN NUMBER) RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
        v_user_id users.user_id%TYPE;
    BEGIN
        
        SELECT user_id INTO v_user_id FROM users WHERE phone_number = p_user_phoneNumber;
    OPEN v_cursor FOR
        select j.job_title,ed.degree_name from jobpost j
        join job_education_req e on j.jobpost_id=e.jobpost_id
        join education ed on e.degree_id= ed.degree_id
        where e.degree_id in(
            select degree_id 
            from user_education 
            where users_id = v_user_id
        );
    RETURN v_cursor;
    
   EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('User does not exist');
                RETURN NULL;
    END;
    
    --- procedure to search job matching user degree  -----
    procedure search_job_degree(p_user_phoneNumber IN NUMBER)
    IS
        v_cursor SYS_REFCURSOR;
        v_job_title jobpost.job_title%TYPE;
        v_degree_name education.degree_name%TYPE;
        
    BEGIN
        v_cursor := job_based_on_degree(p_user_phoneNumber); 
        IF v_cursor%ISOPEN THEN 
            LOOP
                FETCH v_cursor INTO v_job_title, v_degree_name;
                EXIT WHEN v_cursor%NOTFOUND;
                DBMS_OUTPUT.PUT_LINE('Job Title: ' || v_job_title || ', Degree Name: ' || v_degree_name);
            END LOOP;
        CLOSE v_cursor;
        ELSE
             DBMS_OUTPUT.PUT_LINE('No record found');
    END IF;
        
    END search_job_degree;
    
    --FUNCTION to get the jobs based on the user skills
    -- input: p_user_phoneNumber - phone number of jobseeker
    -- output: cursor with job_title, skill_name
    FUNCTION job_based_on_skill(p_user_phoneNumber IN NUMBER) RETURN SYS_REFCURSOR AS
        v_cursor SYS_REFCURSOR;
        v_user_id users.user_id%TYPE;
    BEGIN
        SELECT user_id INTO v_user_id FROM users WHERE phone_number = p_user_phoneNumber;
    OPEN v_cursor FOR
        select j.job_title,sk.skill_name from jobpost j
        join job_post_skill s  on j.jobpost_id=s.jobpostskill_id
        join skillset sk on sk.skillset_id = s.skillset_id
        where s.skillset_id in(select skillset_id from user_skill 
        where user_id = v_user_id);
    RETURN v_cursor;
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('User does not exist');
                RETURN NULL;
    END;
    
    --- procedure to search job matching user skills -----
    procedure search_job_skill(p_user_phoneNumber IN NUMBER)
    IS
        v_cursor SYS_REFCURSOR;
        v_job_title jobpost.job_title%TYPE;
        v_skill_name skillset.skill_name%TYPE;
    
    BEGIN
    v_cursor := job_based_on_skill(p_user_phoneNumber); 
    IF v_cursor%ISOPEN THEN 
        LOOP
            FETCH v_cursor INTO v_job_title, v_skill_name;
            EXIT WHEN v_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Job Title: ' || v_job_title || ', Skill Name: ' || v_skill_name);
        END LOOP;
        CLOSE v_cursor;
    ELSE
             DBMS_OUTPUT.PUT_LINE('No record found');
    END IF;
    END search_job_skill;
    
END JOB_SEEKER_PACKAGE;
/

EXEC JOB_SEEKER_PACKAGE.check_job_application_status(p_user_phoneNumber => 1234567890);
EXEC JOB_SEEKER_PACKAGE.search_job_degree(p_user_phoneNumber => 1234567890);
EXEC JOB_SEEKER_PACKAGE.search_job_skill(p_user_phoneNumber => 1234567890);
/

-------------- Creating Views -----------------

------ 1. Acceptance rate for each company based on the number of people applied and hired ----
CREATE OR REPLACE VIEW ACCEPTANCE_RATES AS
SELECT      C.COMPANY_NAME, COUNT(CASE WHEN A.CURRENT_STATUS = 'HIRED' THEN 1 END) AS ACCEPTED_COUNT, COUNT(*) AS TOTAL_COUNT,
            ROUND((COUNT(CASE WHEN A.CURRENT_STATUS = 'HIRED' THEN 1 END) / COUNT(*)) * 100, 2) AS ACCEPTANCE_RATE
FROM        COMPANY C
JOIN        JOBPOST J ON C.COMPANY_ID = J.JOB_COMPANY_ID
JOIN        APPLICATIONS A ON J.JOBPOST_ID = A.JOB_POST_ID
GROUP BY    C.COMPANY_NAME;

------ 2. Number of job applications submitted by each user  ------
CREATE OR REPLACE VIEW USER_APPLICATION AS
SELECT      U.USER_ID, U.FIRST_NAME, U.LAST_NAME, COUNT(A.APPLICATION_ID) AS NUMBER_OF_APPLICATIONS
FROM        USERS U
JOIN        APPLICATIONS A ON U.USER_ID = A.USER_ID
GROUP BY    U.USER_ID, U.FIRST_NAME, U.LAST_NAME
ORDER BY    COUNT(A.APPLICATION_ID) DESC;


------- 3. The acceptance rate of people who got hired ----------
CREATE OR REPLACE VIEW JOBSEEKER_ANALYSIS AS
SELECT      U.USER_ID, U.FIRST_NAME, COUNT(CASE WHEN A.CURRENT_STATUS = 'HIRED' THEN 1 END) AS ACCEPTED_COUNT, COUNT(*) AS NUMBER_OF_JOBS_APPLIED,
            ROUND((COUNT(CASE WHEN A.CURRENT_STATUS = 'HIRED' THEN 1 END) / COUNT(*)) * 100, 2) AS ACCEPTANCE_RATE
FROM        USERS U
JOIN        APPLICATIONS A ON U.USER_ID = A.USER_ID
GROUP BY    U.USER_ID, U.FIRST_NAME;

-------- 4. Top skills that most job posts require --------------
CREATE OR REPLACE VIEW TOP_SKILLS AS
SELECT      S.SKILL_NAME, COUNT(J.JOBPOSTSKILL_ID) AS MOST_WANTED_SKILL_BY_JOBS
FROM        SKILLSET S
JOIN        JOB_POST_SKILL J ON S.SKILLSET_ID = J.SKILLSET_ID
GROUP BY    S.SKILL_NAME
ORDER BY    COUNT(J.JOBPOSTSKILL_ID) DESC;


-------- 5. tracks the number of applications received for each job listing according to the job description ---------
CREATE OR REPLACE VIEW JOBPOST_ANALYSIS AS
SELECT                  J.JOB_TITLE, C.COMPANY_NAME, COUNT(A.APPLICATION_ID) AS NUMBER_OF_APPLICATIONS_RECEIVED, J.JOB_DESCRIPTION
FROM                    JOBPOST J
JOIN APPLICATIONS A ON  J.JOBPOST_ID = A.JOB_POST_ID
JOIN COMPANY C ON       C.COMPANY_ID = J.JOB_COMPANY_ID
GROUP BY                J.JOB_TITLE, C.COMPANY_NAME, J.JOB_DESCRIPTION
ORDER BY                COUNT(J.JOB_TITLE) DESC;

--------- 6. The report includes information on the number of job postings for each salary range,as well as the most listed job titles and industries for each salary range  -------
CREATE OR REPLACE VIEW SALARYBASED_JOB AS
SELECT
CASE
WHEN SALARY >= 0 AND SALARY <= 50000 THEN '0-50000'
WHEN SALARY > 50000 AND SALARY <= 100000 THEN '50001-100000'
WHEN SALARY > 100000 AND SALARY <= 150000 THEN '100001-150000'
ELSE 'Above 150000'
END AS SALARY_RANGE,
COUNT(*) AS NUMBER_OF_JOB_POSTINGS,
MAX(JOB_TITLE) AS MOST_LISTED_JOB_TITLE,
MAX(Industry_Type) AS MOST_LISTED_INDUSTRY
FROM JOBPOST
JOIN COMPANY ON JOBPOST.JOB_COMPANY_ID = COMPANY.COMPANY_ID
GROUP BY
CASE
WHEN SALARY >= 0 AND SALARY <= 50000 THEN '0-50000'
WHEN SALARY > 50000 AND SALARY <= 100000 THEN '50001-100000'
WHEN SALARY > 100000 AND SALARY <= 150000 THEN '100001-150000'
ELSE 'Above 150000'
END;

--------- 7. Keeps a track on the application status for all the applied job and when the application status changes -------
CREATE OR REPLACE VIEW APPLICATION_STATUS AS
SELECT                          U.USER_ID, A.APPLICATION_ID, U.FIRST_NAME, U.LAST_NAME, JP.JOB_TITLE, C.COMPANY_NAME, JP.SALARY,
                                A.CURRENT_STATUS, A.APPLICATION_DATE, AT.STATUS, AT.CHANGED_ON, AT.MODIFIED_BY
FROM                            USERS U
JOIN APPLICATIONS A ON          U.USER_ID = A.USER_ID
JOIN JOBPOST JP ON              A.JOB_POST_ID = JP.JOBPOST_ID
JOIN COMPANY C ON               JP.JOB_COMPANY_ID = C.COMPANY_ID
JOIN APPLICATION_TRACKING AT ON A.APPLICATION_ID = AT.APPLICATION_ID
ORDER BY                        U.USER_ID, A.APPLICATION_ID, AT.CHANGED_ON;

--------- 8. Time taken by a company to hire a jobseeker ---------
CREATE OR REPLACE FUNCTION get_days_diff(
  date1 IN DATE,
  date2 IN DATE
) RETURN NUMBER
IS
BEGIN
  RETURN ABS(date1 - date2);
END;

/
CREATE OR REPLACE VIEW DECISION_TIME AS 
SELECT APPLICATION_ID, CHANGED_ON AS APPLIED_DATE, HIRED_DATE, get_days_diff(CHANGED_ON, HIRED_DATE) AS TIME_TAKEN_TO_HIRED
FROM (
  SELECT 
    APPLICATION_ID, 
    CHANGED_ON,
    (
      SELECT CHANGED_ON 
      FROM APPLICATION_TRACKING 
      WHERE APPLICATION_ID = a.APPLICATION_ID AND STATUS = 'HIRED'
    ) AS HIRED_DATE
  FROM APPLICATION_TRACKING a 
  WHERE STATUS = 'APPLIED'
)
WHERE HIRED_DATE IS NOT NULL;

--------- 9. Top jobs that are trending based on no.of applications made --------

CREATE OR REPLACE VIEW TRENDING_JOBS AS
SELECT                  J.JOB_TITLE, COUNT(A.APPLICATION_ID) AS NUM_APPLICATIONS
FROM                    JOBPOST J
JOIN APPLICATIONS A ON  J.JOBPOST_ID = A.JOB_POST_ID
GROUP BY                J.JOB_TITLE
ORDER BY                NUM_APPLICATIONS DESC
FETCH FIRST 3 ROWS ONLY;

--------- 10. Tracks the number of candidates each recruiter has sourced and those hired. 
----------The report includes information on the total number of candidates sourced, the number of candidates 
--------- that were hired, and the percentage of candidates that were hired   ----
CREATE OR REPLACE VIEW RECRUITER_ANALYSIS AS
SELECT      MODIFIED_BY AS RECRUITER, COUNT(APPLICATION_ID) AS TOTAL_CANDIDATES_SOURCED,
            SUM(CASE WHEN STATUS = 'HIRED' THEN 1 ELSE 0 END) AS HIRED_CANDIDATES,
            CONCAT(ROUND( SUM(CASE WHEN STATUS = 'HIRED' THEN 1 ELSE 0 END) / COUNT(APPLICATION_ID) * 100,2),'%') AS HIRED_PERCENTAGE
FROM        APPLICATION_TRACKING
WHERE MODIFIED_BY NOT IN (SELECT FIRST_NAME||' '||LAST_NAME FROM USERS WHERE ROLE_TYPE = 'JOBSEEKER')
GROUP BY    MODIFIED_BY;


--------- 11. Number of job postings based on location -------
CREATE OR REPLACE VIEW LOCATION_WISE_JOB_POSTINGS AS
SELECT              jloc.Country, jloc.States, COUNT(jp.JobPost_ID) AS Job_Postings
FROM                JOB_LOCATION jloc
LEFT JOIN JOBPOST jp ON jloc.Job_Location_Id = jp.Job_Location_Id
GROUP BY            jloc.Country, jloc.States;

SELECT * FROM ACCEPTANCE_RATES;
SELECT * FROM USER_APPLICATION;
SELECT * FROM JOBSEEKER_ANALYSIS;
SELECT * FROM TOP_SKILLS;
SELECT * FROM JOBPOST_ANALYSIS;
SELECT * FROM SALARYBASED_JOB;
SELECT * FROM APPLICATION_STATUS;
SELECT * FROM DECISION_TIME;
SELECT * FROM TRENDING_JOBS;
SELECT * FROM RECRUITER_ANALYSIS;
SELECT * FROM LOCATION_WISE_JOB_POSTINGS;


---- Granting privileges to recruiter
grant select,delete,update,insert on sys_admin.jobpost to recruiter1;
grant select,update on sys_admin.applications to recruiter1;
grant select on sys_admin.Acceptance_Rates to recruiter1;
grant select on sys_admin.Recruiter_Analysis to recruiter1;
grant select on sys_admin.jobpost_analysis to recruiter1;
grant select on sys_admin.application_status to recruiter1;
grant select on sys_admin.location_wise_job_postings to recruiter1;
grant execute on sys_admin.POST_JOB_PACKAGE to recruiter1;
grant execute on sys_admin.JOB_APPLICATION_PACKAGE to recruiter1;


--- Granting privileges to jobseekers
grant select, insert on sys_admin.users to jobseeker1;
grant select on sys_admin.education to jobseeker1;
grant select on sys_admin.skillset to jobseeker1;
grant select on sys_admin.applications to jobseeker1;
grant select on sys_admin.jobpost to jobseeker1;
grant select on sys_admin.acceptance_rates to jobseeker1;
grant select on sys_admin.top_skills to jobseeker1;
grant select on sys_admin.trending_jobs to jobseeker1;
grant select on sys_admin.jobseeker_analysis to jobseeker1;
grant select on sys_admin.user_application to jobseeker1;
grant select on sys_admin.salarybased_job to jobseeker1;
grant execute on sys_admin.JOB_SEEKER_PACKAGE to jobseeker1;

commit;